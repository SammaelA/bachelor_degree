#version 430
#define THREADS 64

struct TrunkInfo
{
    float average_thickness;
    float symmetry_x;//in texture coordinates i.e. in [0,1]
    float trunk_split_level;//as a share of tree size
    float trunk_len;//as a share of tree size
    float thickness[16];//
};
struct TreeImageInfo
{
    vec4 tc_transform;//shift and scale, tranform impostor to occupy the whole texture
    float crown_start_level;//as a share of tree size
    float trunk_thickness;//as a share of tree size
    float crown_leaves_share;
    float crown_branches_share;
    TrunkInfo trunk_info;
};

layout( local_size_x = THREADS, local_size_y = 1) in;

layout(std430, binding = 1) buffer results_buf
{
    TreeImageInfo results[];
};
layout(std430, binding = 5) readonly buffer slices_info_buf
{
    uvec4 slices_info[];//x0,y0,layer for slice in atlas
};
layout(std430, binding = 4) writeonly buffer debug_buf
{
    uvec4 debug_image[];
};

uniform int impostor_x;
uniform int impostor_y;
uniform int slices_count;
uniform int start_id;
uniform int image_debug;

uniform sampler2DArray initial_atlas;
uniform sampler2DArray transformed_atlas;

#define MAX_IMPOSTOR_SIZE 512
vec4 smooth_sample_init(ivec3 pixel_coords)
{
    return 0.0625*texelFetch(initial_atlas, pixel_coords + ivec3(-1,-1,0), 0) +
           0.0625*texelFetch(initial_atlas, pixel_coords + ivec3(-1, 1,0), 0) +
           0.0625*texelFetch(initial_atlas, pixel_coords + ivec3( 1,-1,0), 0) +
           0.0625*texelFetch(initial_atlas, pixel_coords + ivec3( 1, 1,0), 0) +
           0.125*texelFetch(initial_atlas, pixel_coords + ivec3(-1, 0,0), 0) +
           0.125*texelFetch(initial_atlas, pixel_coords + ivec3( 0,-1,0), 0) +
           0.125*texelFetch(initial_atlas, pixel_coords + ivec3( 1, 0,0), 0) +
           0.125*texelFetch(initial_atlas, pixel_coords + ivec3( 0, 1,0), 0) +
           0.25*texelFetch(initial_atlas, pixel_coords, 0);
}

void find_trunk_info(ivec3 pixel_coords, int id)
{
    ivec2 trunk_borders[MAX_IMPOSTOR_SIZE];
    trunk_borders[0] = ivec2(0,0);
    trunk_borders[1] = ivec2(0,0);
    int borders_pos = 0;
    int trunk_start_y = -1;
    int trunk_end_y = -1;
    for (int j=0;j<impostor_y;j++)
    {
        int b_pix = 0;
        int l_pix = 0;
        int b_st = -1;
        int b_fin = -1;
        for (int i=0;i<impostor_x;i++)
        {
            vec4 p1 = texelFetch(transformed_atlas, pixel_coords + ivec3(i,j,0), 0);
            l_pix += int(p1.y > 0);
            if (p1.x > 0)
            {
                if (b_fin >= 0)
                {
                    //we found second branch, so the trunk splits here
                    trunk_end_y = max(trunk_start_y,j-1);
                    break;
                }
                else if (b_st < 0)
                {
                    b_st = i;
                    b_pix = 1;
                }
                else
                {
                    b_pix++;
                }
            }
            else if (b_st >= 0 && b_fin < 0) 
            {
                //trunk finished on this slice
                b_fin = i-1;
            }
        }
        if (b_st >= 0 && b_fin < 0)
            b_fin = impostor_x; 
        if (trunk_start_y < 0)
        {
            //we found y where trunk starting
            if (b_st >= 0)
                trunk_start_y = j;
        }
        else
        {
            if (b_st >= 0)
            {
                if (borders_pos > 4 && float(b_fin - b_st) > 1.5*float(trunk_borders[borders_pos-1].y - trunk_borders[borders_pos-1].x))
                {
                    //trunk increase its size rapidly and it's not the artifacts on its very bottom. Probably it is splitted
                    trunk_end_y = max(trunk_start_y,j-1);
                }
                else
                {
                    //trunk continues
                    trunk_borders[borders_pos] = ivec2(b_st,b_fin);
                    borders_pos++;
                }
            }
            else
            {
                //trunk fully covered with leaves or just disappeared, so it is finished
                trunk_end_y = max(trunk_start_y,j-1);
            }
        }
        if (trunk_end_y >= 0)
        {
            //we found where trunk splits
            break;
        }
    }
    if (trunk_start_y >= 0 && trunk_end_y < 0)
        trunk_end_y = impostor_y - 1;
    float arr_step = float(borders_pos-1)/(16.0 - 1.0);
    float av_tr_thickness = 0;
    float av_sym_x = 0;
    for (int i=0;i<16;i++)
    {
        int bord_pos = int(i*arr_step);
        float a = fract(i*arr_step);
        vec2 bord;
        if (i == 15)
            bord = vec2(trunk_borders[borders_pos-1]);
        else 
        {
            bord = a*vec2(trunk_borders[bord_pos+1]) + (1-a)*vec2(trunk_borders[bord_pos]);
        }
        //*results[id].tc_transform.z
        results[id].trunk_info.thickness[i] = (bord.y - bord.x)*results[id].tc_transform.z/impostor_x;
        av_tr_thickness += results[id].trunk_info.thickness[i];
        if (i < 4)
        {
            av_sym_x += 0.5*(bord.y + bord.x)/impostor_x;
        }
    }
    results[id].trunk_info.average_thickness = av_tr_thickness/16;
    results[id].trunk_info.symmetry_x = av_sym_x/4;
    results[id].trunk_info.trunk_split_level = float(trunk_end_y+1)/impostor_y;
    results[id].trunk_info.trunk_len = float(borders_pos)*results[id].tc_transform.w/impostor_y;
}

void find_th_lb(ivec3 pixel_coords, int id)
{
    int leaves_cnt[MAX_IMPOSTOR_SIZE];
    ivec2 min_max[MAX_IMPOSTOR_SIZE];
    int min_x = MAX_IMPOSTOR_SIZE;
    int max_x = 0;
    int min_y = MAX_IMPOSTOR_SIZE;
    int max_y = 0;
    for (int j=0;j<impostor_y;j++)
    {
        leaves_cnt[j] = 0;
        for (int i=0;i<impostor_x;i++)
        {
            vec4 p1 = texelFetch(transformed_atlas, pixel_coords + ivec3(i,j,0), 0);
            if (p1.y > 0)
            {
                leaves_cnt[j]++;
            }
        }
        min_max[j] = ivec2(-1,-2);
        for (int i=0;i<impostor_x;i++)
        {
            vec4 p1 = texelFetch(transformed_atlas, pixel_coords + ivec3(i,j,0), 0);
            if (p1.z > 0)
            {
                min_max[j].x = i;
                break;
            }
        }
        if (min_max[j].x >= 0)
        {
            for (int i=impostor_x;i>=0;i--)
            {
                vec4 p1 = texelFetch(transformed_atlas, pixel_coords + ivec3(i,j,0), 0);
                if (p1.z > 0)
                {
                    min_max[j].y = i;
                    break;
                }
            }
            min_x = min(min_x, min_max[j].x);
            max_x = max(max_x, min_max[j].y);
            min_y = min(min_y, j);
            max_y = max(max_y, j);
        }
    }
    max_x += 1;
    max_y += 1;

    results[id].tc_transform = vec4(min_x, max_x, min_y, max_y);
    results[id].tc_transform = vec4(float(min_x)/float(impostor_x), float(min_y)/float(impostor_y), 
                                    float(max_x - min_x)/float(impostor_x), float(max_y - min_y)/float(impostor_y));
    int fast_inc_pos = 0;
    int fast_inc_speed = -1;
    int max_leaves = int(impostor_x/32.0);
    int len = 0;
    if (leaves_cnt[0] < max_leaves)
    {
        for (int j=1;j<impostor_y;j++)
        {
            if (leaves_cnt[j] >= max_leaves)
            {
                fast_inc_pos = j;
                break;
            }
            else if (leaves_cnt[j] > 0)
            {
                len++;
                if (len > 5)
                {
                    int speed = leaves_cnt[j] - leaves_cnt[j-1];
                    if (speed > fast_inc_speed)
                    {
                        fast_inc_speed = speed;
                        fast_inc_pos = j;
                    }
                }
            }
        }
    }
    results[id].crown_start_level = float(fast_inc_pos)/float(impostor_y);

    float t_pixels = 0;
    int th = 0;
    float sym_line = -1;
    for (int j=0;j<fast_inc_pos;j++)
    {
        th += int(min_max[j].x>=0);
        if (min_max[j].x>=0 && sym_line < 0)
        {
            sym_line = float(min_max[j].x + min_max[j].y)/float(2*impostor_x);
        }
        for (int i=min_max[j].x;i<=min_max[j].y;i++)
        {
            vec4 p1 = smooth_sample_init(pixel_coords + ivec3(i,j,0));
            t_pixels += p1.x;
        }
    }
    results[id].trunk_thickness = t_pixels/(float(th*(max_x - min_x)) + 1e-6);
    //results[id].tc_transform.x = sym_line > 0 ? sym_line : 0.5;
    int sil_sz = 0;
    float br_sum = 0;
    float l_sum = 0;
    for (int j=fast_inc_pos;j<impostor_y;j++)
    {
        sil_sz += min_max[j].y - min_max[j].x + 1;
        for (int i=min_max[j].x;i<=min_max[j].y;i++)
        {
            vec4 p1 = smooth_sample_init(pixel_coords + ivec3(i,j,0));
            br_sum += p1.x;
            l_sum += p1.y;
        }
    }
    results[id].crown_branches_share = br_sum/(float(sil_sz) + 1e-4);
    results[id].crown_leaves_share = l_sum/(float(sil_sz) + 1e-4);

    if (image_debug > 0 && (id == 1 || slices_count == 1))
    {
        for (int j=0;j<impostor_y;j++)
        {
            for (int i=0;i<impostor_x;i++)
            {
                vec4 p1 = texelFetch(transformed_atlas, pixel_coords + ivec3(i,j,0), 0);
                vec4 p2 = smooth_sample_init(pixel_coords + ivec3(i,j,0));
                if (j == fast_inc_pos)
                    debug_image[j*impostor_x + i] = 255*uvec4(1,1,1,1);
                else
                {
                    debug_image[j*impostor_x + i] = uvec4(255.0*p2);
                    if (p2.x == 0 && p2.y == 0)
                    {
                        debug_image[j*impostor_x + i].z = uint(255*p1.z);
                        //debug_image[j*impostor_x + i].z = 2*leaves_cnt[j];
                        debug_image[j*impostor_x + i].w = 255;
                    }
                }
            }
        }
    }
}

void main()
{
    int id =  int(gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                  gl_GlobalInvocationID.y * gl_WorkGroupSize.x + 
                  gl_GlobalInvocationID.x) + start_id;
    if (id >= slices_count)
        return;
    ivec3 slice_data = ivec3(slices_info[id].xyz);
    find_th_lb(slice_data, id);
    find_trunk_info(slice_data, id);
}