#version 430
#define THREADS 32
layout( local_size_x = THREADS ) in;

struct CellInfo
{
    uint lod_from;
    uint lod_to;
    uint pad1;
    uint pad2;
};
struct LodData
{
    vec2 min_max;
    vec2 offset;
};
layout(std140, binding=0) readonly buffer _LodData
{
    LodData lodData[];
};
layout(std140, binding=10) writeonly buffer _cells
{
    CellInfo cells[];
};
layout(std140, binding=8) writeonly buffer _curTypes
{
    uvec4 curTypes[];
};

uniform uint count;
uniform vec2 grid_sizes;
uniform uint grid_counts_x;
uniform uint grid_counts_y;
uniform vec3 pos;
uniform vec3 camera_pos;
uniform int lods_cnt;
float trans;
void main()
{
    uint cells_cnt = grid_counts_x*grid_counts_y;
    uint cur_cnt = uint(ceil(cells_cnt/THREADS));
    for (uint i = cur_cnt*gl_LocalInvocationIndex; i < min(cur_cnt*(gl_LocalInvocationIndex+1), cells_cnt);i++)
    {
        uint x_c = i / grid_counts_y;
        uint y_c = i % grid_counts_y;
        vec2 ps = camera_pos.xz - pos.xz + grid_sizes*vec2(x_c,y_c);
        float d = length(ps);
        int lf = 1000;
        int lt = 1000;
        for (uint j = 0; j< lods_cnt; j++)
        {
            if (lodData[j].min_max.x < d + trans && lodData[j].min_max.y > d - trans)
            {
                if (lf == 1000)
                    lf = int(j);
                lt = int(j);
            }
        }
        cells[i].lod_from = uint(lf);
        cells[i].lod_to = uint(lt);
        cells[i].pad1 = uint(10*d);
        cells[i].pad2 = gl_LocalInvocationIndex;
    }
    if (gl_LocalInvocationIndex == 0)
    {
        for (uint i = 0; i < count; i++)
        {
            curTypes[i] = uvec4(0);
        }
    }
    memoryBarrier();
}
