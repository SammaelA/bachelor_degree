#version 430
#define THREADS 64
layout( local_size_x = THREADS, local_size_y = 1) in;

layout(std430, binding = 1) writeonly buffer results_buf
{
    float results[];
};
layout(std430, binding = 2) readonly buffer slices_info_buf
{
    uvec4 slices_info[];//x0,y0,layer for slice in atlas
};
layout(std430, binding = 3) readonly buffer branches_sizes_buf
{
    vec4 sizes[];//(x,y,z, sqrt(y*y + z*z))
};
uniform int impostor_x;
uniform int impostor_y;
uniform float tex_sz_x;
uniform float tex_sz_y;

uniform int row;
uniform int slice_count;
uniform int start_column;
uniform int branch_count;
uniform sampler2DArray atlas;

uniform int start_mip;
uniform float max_dist;
uniform float size_diff_tolerance;
uniform float size_diff_factor;
float get_dist(ivec3 pixel_coords_1, ivec3 pixel_coords_2, int size_x, int size_y, int mip)
{
float sum = 1e-6;
            float dist = 0;
            for (int i=0;i<size_x;i++)
            {
                for (int j=0;j<size_y;j++)
                {
                    vec4 p1 = texelFetch(atlas, pixel_coords_1 + ivec3(i, j, 0), mip);
                    vec4 p2 = texelFetch(atlas, pixel_coords_2 + ivec3(i, j, 0), mip);
                    
                    if (p1.a > 0 || p2.a > 0)
                    {
                        float f = abs(p1.r-p2.r) + abs(p1.g-p2.g);
                        dist += f;
                        sum += p1.r+p2.r + p1.g+p2.g;
                    }
                }
            }
            dist /= sum;
            return dist;
}
float sz_diff(float a, float b)
{
    return pow(max(1, max(a,b)/min(a,b) - size_diff_tolerance), size_diff_factor);
}
void main()
{
    int column =  int(gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                  gl_GlobalInvocationID.y * gl_WorkGroupSize.x + 
                  gl_GlobalInvocationID.x) + start_column;
    if (column >= branch_count)
        return;
    int result_id = 2*(row*branch_count + column);

    float size_dist = sz_diff(sizes[row].x, sizes[column].x)*sz_diff(sizes[row].w, sizes[column].w) - 1;
    if (size_dist > max_dist)
    {
        results[result_id] = 1e9;
        results[result_id + 1] = 0;
        return;
    }
    int mips[10] = int[10](1, 2, 4, 8, 16, 32, 64, 128, 256, 512);

    int best_rot = 0;
    float best_dist = 1e9;
    for (int mip = start_mip;mip>=0;mip-=2)
    {
        best_rot = 0;
        best_dist = 1e9;
        for (int r = 0;r<slice_count;r++)
        {
            //find probably best rotation based on similarity to first slice.
            int slice_id_1 = slice_count*row + 0;
            int slice_id_2 = slice_count*column + (0+r)%slice_count;
            int sz_x = impostor_x / mips[mip];
            int sz_y = impostor_y / mips[mip];
            ivec3 pc_1 = ivec3(slices_info[slice_id_1].xyz);
            pc_1.xy = pc_1.xy / mips[mip];
            ivec3 pc_2 = ivec3(slices_info[slice_id_2].xyz);
            pc_2.xy = pc_2.xy / mips[mip];

            float dist = get_dist(pc_1, pc_2, sz_x, sz_y, mip);
            if (dist < best_dist)
            {
                best_dist = dist;
                best_rot = r;
            }
        }
        if (best_dist + size_dist > (1 + 0.05*mip)*max_dist)
        {
            results[result_id] = 1e9;
            results[result_id + 1] = 0;
            return;
        }
    }
        for (int d = 1; d<slice_count; d++)
        {
            //calculate precise distant for this rotation as average distance between all slices
            int slice_id_1 = slice_count*row + d;
            int slice_id_2 = slice_count*column + (d+best_rot)%slice_count;
            int mip = 0;
            int sz_x = impostor_x / mips[mip];
            int sz_y = impostor_y / mips[mip];
            ivec3 pc_1 = ivec3(slices_info[slice_id_1].xyz);
            pc_1.xy = pc_1.xy / mips[mip];
            ivec3 pc_2 = ivec3(slices_info[slice_id_2].xyz);
            pc_2.xy = pc_2.xy / mips[mip];

            best_dist += get_dist(pc_1, pc_2, sz_x, sz_y, mip);
        }
    best_dist /= slice_count;
    best_dist = best_dist + size_dist;
    results[result_id] = best_dist > max_dist ? 1e9 : best_dist;
    results[result_id + 1] = best_rot;
}