#version 430
#define THREADS 64

layout( local_size_x = THREADS, local_size_y = 1) in;

layout(std430, binding = 1) writeonly buffer results_buf
{
    float results[];
};
layout(std430, binding = 2) readonly buffer slices_info_buf
{
    uvec4 slices_info[];//x0,y0,layer for slice in atlas
};
layout(std430, binding = 3) readonly buffer impostors_info_buf
{
    vec4 impostors_info[];//impostors_info[0] is info for reference. It contains (Bcyl_radius, Bcyl_height, crown_start_level,0)
};
layout(std430, binding = 4) writeonly buffer debug_buf
{
    uvec4 debug_image[];
};

uniform int impostor_x;
uniform int impostor_y;
uniform int impostors_count;
uniform int impostor_slice_count;
uniform int slice_stride;
uniform int start_id;
uniform int reference_images_cnt;
uniform int image_debug;
uniform int relative_scale;
uniform sampler2DArray atlas;
uniform sampler2DArray reference_image;

float get_dist(ivec3 pixel_coords, vec2 scale, int ref_image_n, int id, float crown_level_ref, float crown_level_i)
{
    int p_cr = int(crown_level_ref*impostor_y);
    int p_cr_i = int(crown_level_i*impostor_y);

    vec2 scale_i = vec2(1,1);
    if (scale.x < 1)
    {
        scale_i.x = 1 / scale.x;
        scale.x = 1;
    }
    if (scale.y < 1)
    {
        scale_i.y = 1 / scale.y;
        scale.y = 1;
    }

    float crone_sum = 1e-6;
    float crone_dist = 0;
    int max_y = impostor_y - max(min(p_cr, p_cr_i) + 1,0);
    for (int j=0;j<max_y;j++)
    {
        for (int i=0;i<impostor_x;i++)
        {
            vec2 imp_tc = (vec2(i/float(impostor_x),j/float(impostor_y) + crown_level_i) - vec2(0.5,0))*scale_i + vec2(0.5,0);
            vec4 p1 = (imp_tc.x < 0 || imp_tc.x > 1 || imp_tc.y < 0 || imp_tc.y > 1) ?
                       vec4(0,0,0,0) :
                       texelFetch(atlas, pixel_coords + ivec3(imp_tc*vec2(impostor_x, impostor_y), 0), 0);

            vec2 im_tc = (vec2(i/float(impostor_x),j/float(impostor_y) + crown_level_ref) - vec2(0.5,0))*scale + vec2(0.5,0);
            vec4 p2 = (im_tc.x < 0 || im_tc.x > 1 || im_tc.y < 0 || im_tc.y > 1) ?
                       vec4(0,0,0,0) :
                       textureLod(reference_image, vec3(im_tc + vec2(ref_image_n,0), 0),0);

            crone_dist += abs(p1.z - p2.z);
            crone_sum += max(p1.z, p2.z);

            if (image_debug > 0 && id == 0)
            {
                debug_image[j*impostor_x + i] = uvec4(0, 255*p1.z, 0, 255);
                debug_image[2*impostor_x*impostor_y + j*impostor_x + i] = uvec4(0, 0, 255*p2.z, 255);
                debug_image[3*impostor_x*impostor_y + j*impostor_x + i] = uvec4(0, 255*p1.z, 255*p2.z, 255);
                if (int(imp_tc.y*impostor_y) == p_cr_i)
                {
                    debug_image[3*impostor_x*impostor_y + j*impostor_x + i] = uvec4(255, 128, 0, 255);
                    debug_image[j*impostor_x + i] = uvec4(255, 128, 0, 255);
                }
                if (int(im_tc.y*impostor_y) == p_cr)
                {
                    debug_image[3*impostor_x*impostor_y + j*impostor_x + i] = uvec4(255, 0, 0, 255);
                    debug_image[2*impostor_x*impostor_y + j*impostor_x + i] = uvec4(255, 0, 0, 255);
                }
            }
        }
    }

    float trunk_sum = 1e-6;
    float trunk_dist = 0;
    int start_y = max(max(p_cr, p_cr_i) + 1,0);
    for (int j=0;j<start_y;j++)
    {
        for (int i=0;i<impostor_x;i++)
        {
            vec2 imp_tc = (vec2(i/float(impostor_x),-j/float(impostor_y) + crown_level_i) - vec2(0.5,0))*scale_i + vec2(0.5,0);
            vec4 p1 = (imp_tc.x < 0 || imp_tc.x > 1 || imp_tc.y < 0 || imp_tc.y > 1) ?
                       vec4(0,0,0,0) :
                       texelFetch(atlas, pixel_coords + ivec3(imp_tc*vec2(impostor_x, impostor_y), 0), 0);

            vec2 im_tc = (vec2(i/float(impostor_x),-j/float(impostor_y) + crown_level_ref) - vec2(0.5,0))*scale + vec2(0.5,0);
            vec4 p2 = (im_tc.x < 0 || im_tc.x > 1 || im_tc.y < 0 || im_tc.y > 1) ?
                       vec4(0,0,0,0) :
                       textureLod(reference_image, vec3(im_tc + vec2(ref_image_n,0), 0),0);

            crone_dist += abs(p1.x - p2.x);
            crone_sum += max(p1.x, p2.x);

            if (image_debug > 0 && id == 0)
            {
                debug_image[impostor_x*impostor_y + j*impostor_x + i] = uvec4(0, 255*p1.x, 255*p2.x, 255);
            }
        }
    }
    return crown_level_ref*(trunk_dist/trunk_sum) + (1 - crown_level_ref)*(crone_dist/crone_sum);
}

void main()
{
    int id =  int(gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                  gl_GlobalInvocationID.y * gl_WorkGroupSize.x + 
                  gl_GlobalInvocationID.x) + start_id;
    int impostor_n = id / impostor_slice_count;
    int slice_n = id % impostor_slice_count;
    if (impostor_n >= impostors_count)
        return;
    if (impostors_info[0].x < 0 || impostors_info[0].y < 0 || 
        impostors_info[impostor_n+1].x < 0 || impostors_info[impostor_n+1].y < 0)
    {
        results[id] = 1;
        return;
    }
    vec2 scale = vec2(1,1);
    if (relative_scale > 0)
    {
        scale.y = 1;
        scale.x = (impostors_info[impostor_n+1].x/impostors_info[impostor_n+1].y)/
                  (impostors_info[0].x/impostors_info[0].y);
    }
    else
    {
        scale.x = impostors_info[impostor_n+1].x/impostors_info[0].x;
        scale.y = impostors_info[impostor_n+1].y/impostors_info[0].y;
    }
    ivec3 slice_data = ivec3(slices_info[impostor_n*slice_stride + slice_n].xyz);
    float min_dist = 1;
    for (int i=0;i<reference_images_cnt;i++)
    {
        float dist = get_dist(slice_data, scale, i, id, impostors_info[0].z, impostors_info[impostor_n+1].z);
        min_dist = min(dist, min_dist);
    }
    results[id] = min_dist;
}