#version 430
#define THREADS 64
layout( local_size_x = THREADS, local_size_y = 1) in;

layout(std430, binding = 1) writeonly buffer results_buf
{
    float results[];
};
layout(std430, binding = 2) readonly buffer slices_info_buf
{
    uvec4 slices_info[];
};
uniform int impostor_x;
uniform int impostor_y;
uniform float tex_sz_x;
uniform float tex_sz_y;

uniform int row;
uniform int slice_count;
uniform int start_column;
uniform int branch_count;
uniform sampler2DArray atlas;

float get_dist(int column, int slice_id_1, int slice_id_2)
{
float sum = 1e-6;
            float dist = 0;
            for (int i=0;i<impostor_x;i++)
            {
                for (int j=0;j<impostor_y;j++)
                {
                    ivec3 pixel_coords = ivec3(slices_info[slice_id_1].xyz) + ivec3(i, j, 0);
                    vec3 coords = vec3(pixel_coords.x/tex_sz_x, pixel_coords.y/tex_sz_y,pixel_coords.z);
                    //vec4 p1 = texture(atlas,coords);
                    vec4 p1 = texelFetch(atlas, pixel_coords, 0);
                    pixel_coords = ivec3(slices_info[slice_id_2].xyz) + ivec3(i, j, 0);
                    coords = vec3(pixel_coords.x/tex_sz_x, pixel_coords.y/tex_sz_y,pixel_coords.z);
                    //vec4 p2 = texture(atlas,coords);
                    vec4 p2 = texelFetch(atlas, pixel_coords, 0);
                    if (p1.a > 0 || p2.a > 0)
                    {
                        float f = abs(p1.r-p2.r) + abs(p1.g-p2.g);

                        dist += f;
                        sum += abs(p1.r+p2.r) + abs(p1.g+p2.g);
                    }
                }
            }
            dist /= sum;
            return dist;
}
void main()
{
    int column =  int(gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                  gl_GlobalInvocationID.y * gl_WorkGroupSize.x + 
                  gl_GlobalInvocationID.x) + start_column;
    if (column >= branch_count)
        return;
    int best_rot = 0;
    float best_dist = 1e9;
    for (int r = 0;r<slice_count;r++)
    {
        //find probably best rotation based on similarity to first slice.
        int slice_id_1 = slice_count*row + 0;
        int slice_id_2 = slice_count*column + (0+r)%slice_count;
        float dist = get_dist(column, slice_id_1, slice_id_2);
        if (dist < best_dist)
        {
            best_dist = dist;
            best_rot = r;
        }
    }
        for (int d = 1; d<slice_count; d++)
        {
            //calculate precise distant for this rotation as average distance between all slices
            int slice_id_1 = slice_count*row + d;
            int slice_id_2 = slice_count*column + (d+best_rot)%slice_count;

            best_dist += get_dist(column, slice_id_1, slice_id_2);
        }
    best_dist /= slice_count;

    int result_id = 2*(row*branch_count + column);
    results[result_id] = best_dist;
    results[result_id + 1] = best_rot;
}